package gravity

import (
	"fmt"
	"io"

	types1 "github.com/cosmos/cosmos-sdk/codec/types"

	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)

func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

// MsgSubmitEthereumTxConfirmation submits an ethereum signature for a given
// validator
func init() { proto.RegisterFile("gravity/v1/msgs.proto", fileDescriptor_2f8523f2f6feb451) }

var fileDescriptor_2f8523f2f6feb451 = []byte{
	// 1283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x8f, 0xd3, 0x46,
	0x14, 0x5f, 0x27, 0x61, 0xd1, 0xbe, 0xec, 0xa7, 0x77, 0x81, 0x6c, 0x0a, 0xc9, 0x62, 0x44, 0x59,
	0x8a, 0x62, 0xb3, 0x0b, 0x52, 0x2b, 0xaa, 0x56, 0x22, 0xd9, 0x45, 0x54, 0xd5, 0x72, 0x48, 0xa0,
	0x42, 0xbd, 0x44, 0xfe, 0x78, 0x38, 0x86, 0xd8, 0x13, 0x79, 0x26, 0xd1, 0xe6, 0xda, 0x53, 0xd5,
	0x53, 0x7b, 0xe8, 0x9d, 0x03, 0xea, 0x5f, 0xc0, 0x3f, 0xc0, 0x8d, 0x72, 0x42, 0xea, 0xa5, 0xea,
	0x01, 0x55, 0x70, 0xe9, 0xdf, 0x50, 0xb5, 0x52, 0xe5, 0x99, 0x71, 0xd6, 0x76, 0xbc, 0x5f, 0x52,
	0x4f, 0xf1, 0xbc, 0xf7, 0x9b, 0x37, 0xef, 0xe3, 0x37, 0xef, 0x4d, 0xe0, 0x9c, 0x1b, 0x9a, 0x23,
	0x8f, 0x8d, 0x8d, 0xd1, 0x96, 0xe1, 0x53, 0x97, 0xea, 0x83, 0x90, 0x30, 0xa2, 0x82, 0x14, 0xeb,
	0xa3, 0xad, 0x6a, 0xcd, 0x26, 0xd4, 0x27, 0xd4, 0xb0, 0x4c, 0x8a, 0xc6, 0x68, 0xcb, 0x42, 0x66,
	0x6e, 0x19, 0x36, 0xf1, 0x02, 0x81, 0xad, 0xae, 0x0b, 0x7d, 0x97, 0xaf, 0x0c, 0xb1, 0x90, 0xaa,
	0x4a, 0xc2, 0x7a, 0x6c, 0x51, 0x68, 0xd6, 0x5c, 0xe2, 0x12, 0xb1, 0x23, 0xfa, 0x92, 0xd2, 0x8b,
	0x2e, 0x21, 0x6e, 0x1f, 0x0d, 0x73, 0xe0, 0x19, 0x66, 0x10, 0x10, 0x66, 0x32, 0x8f, 0x04, 0xb1,
	0xb5, 0x75, 0xa9, 0xe5, 0x2b, 0x6b, 0xf8, 0xc4, 0x30, 0x03, 0x69, 0x4e, 0xfb, 0x4d, 0x81, 0x95,
	0x3d, 0xea, 0x76, 0x30, 0x70, 0x1e, 0x92, 0x5d, 0xd6, 0xc3, 0x10, 0x87, 0xbe, 0x7a, 0x1e, 0x66,
	0x29, 0x06, 0x0e, 0x86, 0x15, 0x65, 0x43, 0xd9, 0x9c, 0x6b, 0xcb, 0x95, 0xda, 0x00, 0x15, 0x25,
	0xa6, 0x1b, 0xa2, 0xed, 0x0d, 0x3c, 0x0c, 0x58, 0xa5, 0xc0, 0x31, 0x2b, 0xb1, 0xa6, 0x1d, 0x2b,
	0xd4, 0x4f, 0x61, 0xd6, 0xf4, 0xc9, 0x30, 0x60, 0x95, 0xe2, 0x86, 0xb2, 0x59, 0xde, 0x5e, 0xd7,
	0x65, 0x90, 0x51, 0x46, 0x74, 0x99, 0x11, 0xbd, 0x45, 0xbc, 0xa0, 0x59, 0x7a, 0xfd, 0xae, 0x3e,
	0xd3, 0x96, 0x70, 0xf5, 0x4b, 0x00, 0x2b, 0xf4, 0x1c, 0x17, 0xbb, 0x4f, 0x10, 0x2b, 0xa5, 0x93,
	0x6d, 0x9e, 0x13, 0x5b, 0xee, 0x21, 0x6a, 0x37, 0x60, 0x7d, 0x2a, 0xa8, 0x36, 0xd2, 0x01, 0x09,
	0x28, 0xaa, 0x8b, 0x50, 0xf0, 0x1c, 0x1e, 0x58, 0xa9, 0x5d, 0xf0, 0x1c, 0xed, 0x2e, 0x5c, 0xd8,
	0xa3, 0x6e, 0xcb, 0x0c, 0x6c, 0xec, 0x67, 0xf2, 0x90, 0x81, 0x26, 0xf2, 0x52, 0x48, 0xe6, 0x45,
	0xbb, 0x0c, 0xf5, 0x43, 0x4c, 0xc4, 0xa7, 0x6a, 0x3f, 0x2b, 0x1c, 0xd3, 0x19, 0x5a, 0xbe, 0xc7,
	0x62, 0xed, 0xc3, 0xfd, 0x16, 0x09, 0x9e, 0x78, 0xa1, 0xcf, 0xcb, 0xa5, 0x3e, 0x84, 0x79, 0x3b,
	0xb1, 0xe6, 0x07, 0x97, 0xb7, 0xd7, 0x74, 0x51, 0x3e, 0x3d, 0x2e, 0x9f, 0x7e, 0x37, 0x18, 0x37,
	0xab, 0x6f, 0x5e, 0x36, 0xce, 0xe7, 0xdb, 0x69, 0xa7, 0xac, 0x70, 0xa7, 0x3d, 0x37, 0x48, 0x38,
	0xcd, 0x57, 0x77, 0x4a, 0xdf, 0x3f, 0xaf, 0xcf, 0x68, 0xaf, 0x14, 0xa8, 0xb6, 0x48, 0xc0, 0x42,
	0xd3, 0x66, 0x2d, 0xb3, 0xdf, 0xcf, 0xb8, 0xd4, 0x00, 0xd5, 0x0b, 0x46, 0x66, 0xdf, 0x73, 0xf8,
	0xba, 0x4b, 0x6d, 0x32, 0x40, 0xee, 0xd8, 0x7c, 0x7b, 0x25, 0xa9, 0xe9, 0x44, 0x8a, 0x29, 0x78,
	0x40, 0x02, 0x1b, 0xf9, 0xb9, 0xa5, 0x34, 0xfc, 0x41, 0xa4, 0x50, 0xaf, 0xc1, 0xd2, 0x84, 0x4f,
	0xd2, 0xc7, 0x22, 0xf7, 0x71, 0x31, 0x16, 0x77, 0xb8, 0x54, 0xbd, 0x08, 0x73, 0x91, 0xde, 0x64,
	0xc3, 0x50, 0xf0, 0x61, 0xbe, 0x7d, 0x20, 0xd0, 0x5e, 0x28, 0xb0, 0xda, 0x34, 0x99, 0xdd, 0xcb,
	0x38, 0x7f, 0x15, 0x16, 0x19, 0x79, 0x86, 0x41, 0xd7, 0x96, 0x01, 0x4a, 0x3a, 0x2f, 0x70, 0x69,
	0x1c, 0xb5, 0x5a, 0x87, 0xb2, 0x15, 0xed, 0x4e, 0x79, 0x0b, 0x5c, 0xf4, 0xbf, 0xba, 0xf9, 0x83,
	0x02, 0x17, 0x04, 0xb0, 0x83, 0x2c, 0xe3, 0xea, 0x26, 0x2c, 0x0b, 0xcb, 0x5d, 0x8a, 0x4c, 0x3a,
	0x22, 0x78, 0xb7, 0x48, 0xe3, 0x2d, 0x87, 0x3a, 0x53, 0x38, 0xde, 0x99, 0x62, 0xd6, 0x99, 0xeb,
	0x70, 0xed, 0x18, 0x3a, 0x4e, 0xa8, 0x3b, 0x84, 0xf3, 0x53, 0xd0, 0xdd, 0x51, 0x74, 0xc1, 0xbf,
	0x80, 0x33, 0x18, 0x7d, 0x1c, 0xc9, 0xd4, 0x95, 0x37, 0x2f, 0x1b, 0x0b, 0xa9, 0x7d, 0x6d, 0xb1,
	0xeb, 0x18, 0x66, 0x6e, 0x40, 0x2d, 0xff, 0xd8, 0x89, 0x63, 0xaf, 0x14, 0x58, 0xda, 0xa3, 0xee,
	0x0e, 0xf6, 0xd1, 0x35, 0x19, 0x7e, 0x8d, 0x63, 0xaa, 0xde, 0x80, 0x15, 0xc9, 0x32, 0x12, 0x76,
	0x4d, 0xc7, 0x09, 0x91, 0x52, 0x59, 0xf6, 0xe5, 0x89, 0xe2, 0xae, 0x90, 0xab, 0x5b, 0xb0, 0x46,
	0x42, 0xbb, 0x87, 0x94, 0x85, 0x29, 0xbc, 0x70, 0x67, 0x35, 0xa9, 0x8b, 0xb7, 0x5c, 0x87, 0xe5,
	0x49, 0xfa, 0x63, 0xb8, 0x20, 0xc3, 0xa4, 0x2c, 0x31, 0xf4, 0x0a, 0x2c, 0x20, 0xeb, 0x75, 0xb3,
	0x8c, 0x98, 0x47, 0xd6, 0xeb, 0x4c, 0xea, 0xb0, 0xce, 0xbb, 0x4f, 0x32, 0x84, 0x49, 0x78, 0x8f,
	0x61, 0x35, 0x29, 0x8f, 0xf6, 0xec, 0x51, 0xf7, 0x74, 0x11, 0xae, 0xc1, 0x99, 0x24, 0xab, 0xc5,
	0x42, 0x7b, 0x0c, 0xe7, 0xf6, 0xa8, 0x1b, 0x27, 0xf5, 0x3e, 0x7a, 0x6e, 0x8f, 0x7d, 0x43, 0x58,
	0x9a, 0x5c, 0x3d, 0x2e, 0x8e, 0x59, 0x88, 0x29, 0xf0, 0x61, 0xa5, 0xd3, 0xea, 0x70, 0x29, 0xd7,
	0xf2, 0x24, 0xa8, 0x17, 0x05, 0x58, 0x11, 0x2d, 0xb2, 0xc5, 0xdb, 0xb9, 0x20, 0x52, 0x1d, 0xca,
	0x9c, 0x12, 0x29, 0xe6, 0x03, 0x17, 0x09, 0xd6, 0x4f, 0x5f, 0xe5, 0x42, 0xde, 0x55, 0xbe, 0x97,
	0x9a, 0x38, 0x73, 0x4d, 0x3d, 0x9a, 0x0c, 0x7f, 0xbc, 0xab, 0x7f, 0xec, 0x7a, 0xac, 0x37, 0xb4,
	0x74, 0x9b, 0xf8, 0x72, 0xd0, 0xca, 0x9f, 0x06, 0x75, 0x9e, 0x19, 0x6c, 0x3c, 0x40, 0xaa, 0x7f,
	0x15, 0xb0, 0xc9, 0x00, 0x4a, 0x5d, 0x32, 0xd1, 0xf1, 0x4b, 0x99, 0x4b, 0x26, 0x26, 0xe2, 0x35,
	0x58, 0x92, 0x53, 0x3c, 0x44, 0x1b, 0xbd, 0x11, 0x86, 0x95, 0x33, 0x02, 0x28, 0xc4, 0x6d, 0x29,
	0xcd, 0xcb, 0xec, 0x6c, 0x5e, 0x66, 0xef, 0x94, 0xfe, 0x7a, 0x5e, 0x57, 0xb4, 0x5f, 0x14, 0x50,
	0x79, 0x4b, 0xdb, 0xdd, 0x47, 0x7b, 0xc8, 0xd0, 0x11, 0x79, 0x3a, 0x79, 0x47, 0x4b, 0xa6, 0xb3,
	0x30, 0x95, 0xce, 0x1c, 0x6f, 0x8a, 0xb9, 0x75, 0xce, 0xf4, 0xc6, 0x52, 0xb6, 0x37, 0x6a, 0xff,
	0x2a, 0xb0, 0x9e, 0x9c, 0x1f, 0x69, 0x7f, 0x8f, 0xad, 0xab, 0x9b, 0x3b, 0x5f, 0x22, 0x87, 0xe7,
	0x9b, 0x9f, 0xfd, 0xfd, 0xae, 0x7e, 0x3b, 0x51, 0x38, 0xc6, 0x53, 0xee, 0x7b, 0x01, 0x4b, 0x7e,
	0xf6, 0x3d, 0x8b, 0x1a, 0xd6, 0x98, 0x21, 0xd5, 0xef, 0xe3, 0x7e, 0x33, 0xfa, 0x38, 0xf9, 0x64,
	0x2a, 0x9e, 0x64, 0x32, 0xc9, 0x04, 0x95, 0xf2, 0x12, 0xa4, 0xfd, 0x54, 0x00, 0x75, 0xb7, 0xdd,
	0xda, 0xbe, 0xb9, 0x83, 0x83, 0x3e, 0x19, 0x9f, 0x38, 0xf0, 0xcb, 0xd1, 0xac, 0xe7, 0xc4, 0x71,
	0x30, 0x20, 0xbe, 0xa4, 0x73, 0x59, 0xc8, 0x76, 0x22, 0x51, 0x4e, 0xb1, 0x8b, 0x79, 0xc5, 0xbe,
	0x04, 0x80, 0xa1, 0xbd, 0x7d, 0xb3, 0x1b, 0x98, 0x3e, 0x4a, 0x9a, 0xce, 0x71, 0xc9, 0x03, 0xd3,
	0xe7, 0x07, 0x09, 0x35, 0x1d, 0xfb, 0x16, 0xe9, 0x4b, 0x7a, 0x96, 0xb9, 0xac, 0xc3, 0x45, 0xd1,
	0x41, 0x02, 0xe2, 0xa0, 0xed, 0xf9, 0x66, 0x9f, 0x4a, 0x6a, 0x2e, 0x70, 0xe9, 0x8e, 0x14, 0xe6,
	0xe5, 0xe4, 0x6c, 0x6e, 0x4e, 0x7e, 0x55, 0xa0, 0x92, 0x18, 0x74, 0xa7, 0xa4, 0x44, 0x03, 0x56,
	0x13, 0xa3, 0x90, 0xed, 0xa7, 0x48, 0xbc, 0x4c, 0x0f, 0xec, 0x9e, 0x92, 0xca, 0xb7, 0xe1, 0xac,
	0x8f, 0xbe, 0x85, 0x21, 0xad, 0x94, 0x36, 0x8a, 0x9b, 0xe5, 0xed, 0xaa, 0x7e, 0xf0, 0x58, 0xd7,
	0x77, 0x53, 0xc3, 0xb3, 0x1d, 0x43, 0xb7, 0xff, 0x29, 0x41, 0x31, 0xea, 0xba, 0x8f, 0x61, 0x31,
	0xf3, 0x38, 0xbc, 0x94, 0xdc, 0x3e, 0xf5, 0xdc, 0xac, 0x5e, 0x3d, 0x52, 0x3d, 0xe9, 0x87, 0x33,
	0xea, 0x53, 0x58, 0xcb, 0x7d, 0x7c, 0x5e, 0xc9, 0x18, 0xc8, 0x03, 0x55, 0x6f, 0x9c, 0x00, 0x94,
	0x38, 0xeb, 0x3b, 0x05, 0x2e, 0x1e, 0xf9, 0x04, 0xcd, 0xda, 0x3b, 0x0a, 0x5c, 0xbd, 0x75, 0x0a,
	0x70, 0xc2, 0x09, 0x17, 0x56, 0xf3, 0x1e, 0x13, 0xda, 0x91, 0xd6, 0x38, 0xa6, 0xfa, 0xc9, 0xf1,
	0x98, 0xc4, 0x41, 0x8f, 0x60, 0xa9, 0x83, 0x2c, 0xf5, 0x3c, 0xf8, 0x28, 0x63, 0x20, 0xa9, 0xac,
	0x5e, 0x39, 0x42, 0x99, 0x2a, 0x58, 0x25, 0x7d, 0x6e, 0x62, 0x80, 0x5e, 0xce, 0x98, 0x98, 0x86,
	0x54, 0xaf, 0x1f, 0x0b, 0x39, 0x38, 0xab, 0xf9, 0xe8, 0xf5, 0xfb, 0x9a, 0xf2, 0xf6, 0x7d, 0x4d,
	0xf9, 0xf3, 0x7d, 0x4d, 0xf9, 0xf1, 0x43, 0x6d, 0xe6, 0xed, 0x87, 0xda, 0xcc, 0xef, 0x1f, 0x6a,
	0x33, 0xdf, 0x7e, 0x9e, 0xe8, 0x8c, 0x03, 0x74, 0xdd, 0xf1, 0xd3, 0x51, 0xfc, 0x57, 0xb1, 0x21,
	0xfe, 0x09, 0x19, 0x3e, 0x71, 0x86, 0x7d, 0x34, 0x46, 0xb7, 0x8d, 0xfd, 0x58, 0x25, 0x66, 0x9d,
	0x35, 0xcb, 0x5f, 0x68, 0xb7, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xbe, 0x95, 0x65, 0xc6,
	0x0e, 0x00, 0x00,
}

type MsgSubmitEthereumTxConfirmation struct {
	// TODO: can we make this take an array?
	Confirmation *types1.Any `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	Signer       string      `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgSubmitEthereumTxConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Confirmation != nil {
		{
			size, err := m.Confirmation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitEthereumTxConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitEthereumTxConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitEthereumTxConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirmation == nil {
				m.Confirmation = &types1.Any{}
			}
			if err := m.Confirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSubmitEthereumTxConfirmation) Reset()         { *m = MsgSubmitEthereumTxConfirmation{} }
func (m *MsgSubmitEthereumTxConfirmation) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitEthereumTxConfirmation) ProtoMessage()    {}
func (*MsgSubmitEthereumTxConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{4}
}
func (m *MsgSubmitEthereumTxConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitEthereumTxConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitEthereumTxConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitEthereumTxConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitEthereumTxConfirmation.Merge(m, src)
}
func (m *MsgSubmitEthereumTxConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitEthereumTxConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitEthereumTxConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitEthereumTxConfirmation proto.InternalMessageInfo

func (m *MsgSubmitEthereumTxConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirmation != nil {
		l = m.Confirmation.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}
